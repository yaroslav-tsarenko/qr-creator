import bcrypt from "bcryptjs";
import { User } from "../models/user.model";
import { RefreshSession } from "../models/refreshSession.model";
import { sha256, randomToken } from "../utils/crypto";
import { signAccessToken, signRefreshToken } from "../utils/jwt";
import { ENV } from "../config/env";
import { Types } from "mongoose";
import {sendEmail} from "@/backend/utils/sendEmail";

function parseDurationToSec(input: string): number {
    const m = input.match(/^(\d+)([smhd])?$/i);
    if (!m) return 60 * 60 * 24 * 30;
    const n = parseInt(m[1], 10);
    const unit = (m[2] || "s").toLowerCase();
    const mult = unit === "s" ? 1 : unit === "m" ? 60 : unit === "h" ? 3600 : 86400;
    return n * mult;
}

const REFRESH_TTL_SEC = parseDurationToSec(ENV.REFRESH_TOKEN_EXPIRES);

export const authService = {
    async register(data: { name: string; email: string; password: string }) {
        const existing = await User.findOne({ email: data.email.toLowerCase() });
        if (existing) throw new Error("Email already registered");

        const hashed = await bcrypt.hash(data.password, 12);
        const user = await User.create({ ...data, email: data.email.toLowerCase(), password: hashed });
        const result = await this.issueTokensAndSession(user._id, user.email, user.role, undefined, undefined);
        await sendEmail(
            user.email,
            "Welcome to TechGuide üéâ",
            `Hi ${user.name}, thanks for registering at TechGuide.`
        );

        return { user, ...result };
    },

    async login(email: string, password: string, userAgent?: string, ip?: string) {
        const user = await User.findOne({ email: email.toLowerCase() }).select("+password");
        if (!user) throw new Error("Invalid credentials");

        const valid = await bcrypt.compare(password, user.password);
        if (!valid) throw new Error("Invalid credentials");

        const result = await this.issueTokensAndSession(user._id, user.email, user.role, userAgent, ip);
        return { user, ...result };
    },

    async issueTokensAndSession(userId: Types.ObjectId, email: string, role: string, userAgent?: string, ip?: string) {
        // refresh —è–∫ —Ä–∞–Ω–¥–æ–º–Ω–∏–π —Ç–æ–∫–µ–Ω (–Ω–µ JWT); —É –ë–î –∑–±–µ—Ä—ñ–≥–∞—î–º–æ hash
        const rawRefresh = randomToken(64);
        const tokenHash = sha256(rawRefresh);

        const expiresAt = new Date(Date.now() + REFRESH_TTL_SEC * 1000);
        const session = await RefreshSession.create({
            userId,
            tokenHash,
            userAgent,
            ip,
            expiresAt,
        });

        const accessToken = await signAccessToken({ sub: userId.toString(), email, role });
        // –¥–æ–¥–∞—Ç–∫–æ–≤–æ ‚Äî JWT refresh –∑ payload (sid) –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å—É:
        const refreshJWT = await signRefreshToken({ sub: userId.toString(), sid: session._id.toString() }, ENV.REFRESH_TOKEN_EXPIRES);

        // –ø–µ—Ä–µ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—É: access JWT + "rawRefresh" —è–∫ cookie –∑–Ω–∞—á–µ–Ω–Ω—è (–∞–ª–µ –º–∏ –¥–∞–º–æ —Å–∞–º–µ refreshJWT —É cookie, –∞ raw ‚Äî –ù–ï –≤—ñ–¥–¥–∞—î–º–æ)
        // –¢—Ä—é–∫: –∫–ª–∞–¥–µ–º–æ —É cookie refresh **JWT** (–ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π), –∞ –≤ –ë–î —Ç—Ä–∏–º–∞—î–º–æ hash –≤—ñ–¥ "rawRefresh".
        // –©–æ–± –∑–≤'—è–∑–∞—Ç–∏ —ó—Ö, –≤ JWT —Ç—Ä–∏–º–∞—î–º–æ sid —Å–µ—Å—ñ—ó. –ü—Ä–∏ refresh –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ JWT (–ø—ñ–¥–ø–∏—Å) + –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó (sid) + –Ω–µ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–∞.
        // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: —Ä–æ—Ç—É—î–º–æ —Å–µ—Å—ñ—é (revoke + –Ω–æ–≤–∞).
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ cookie rawRefresh, –∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ hash ‚Äî —Ç–µ–∂ –æ–∫, –∞–ª–µ —Ç—É—Ç –º–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å —ñ —Å–µ—Å—ñ—é –æ–¥–Ω–æ—á–∞—Å–Ω–æ.

        return { accessToken, refreshToken: refreshJWT, session };
    },

    async refresh(refreshJWT: string, userAgent?: string, ip?: string) {
        // –≤–µ—Ä–∏—Ñ –ø—ñ–¥–ø–∏—Å—É refresh JWT —ñ –¥—ñ—Å—Ç–∞–Ω–µ–º–æ sid
        const { verifyRefreshToken } = await import("../utils/jwt");
        let payload: { sub: string; sid: string };
        try {
            payload = await verifyRefreshToken(refreshJWT);
        } catch {
            throw new Error("SessionInvalid");
        }

        const session = await RefreshSession.findById(payload.sid);
        if (!session || session.revokedAt || session.expiresAt.getTime() < Date.now()) {
            throw new Error("SessionInvalid");
        }

        // **–†–æ—Ç–∞—Ü—ñ—è**: –≤—ñ–¥–∫–ª–∏–∫–∞—î–º–æ —Å—Ç–∞—Ä—É, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é/refresh
        session.revokedAt = new Date();
        await session.save();

        const user = await User.findById(session.userId);
        if (!user) throw new Error("UserNotFound");

        const { accessToken, refreshToken } = await this.issueTokensAndSession(user._id, user.email, user.role, userAgent, ip);

        return { user, accessToken, refreshToken };
    },

    async me(userId: string) {
        const user = await User.findById(userId).select("-password");
        if (!user) throw new Error("UserNotFound");
        return user;
    },

    async logout(refreshJWT: string) {
        const { verifyRefreshToken } = await import("../utils/jwt");
        try {
            const payload = await verifyRefreshToken<{ sub: string; sid: string }>(refreshJWT);
            await RefreshSession.findByIdAndUpdate(payload.sid, { $set: { revokedAt: new Date() } });
        } catch {
            // —ñ–¥empotent
        }
    },

    async logoutAll(userId: string) {
        await RefreshSession.updateMany({ userId }, { $set: { revokedAt: new Date() } });
    },
};
